#Base Setting
spring:
  jpa:
    defer-datasource-initialization: true
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    open-in-view: false
  sql:
    init:
      platform: mysql
      mode: always

debug: false
management:
  endpoints:
    web:
      exposure:
        include: "*"

logging:
  level:
    site.moamoa.backend: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql: trace

jwt:
  secretKey: ${jwt.secret.key}

  access:
    expiration: ${jwt.access.expiration}
    header: Authorization

  refresh:
    expiration: ${jwt.refresh.expiration}
    header: Authorization-refresh

---
# Local Setting
spring:
  config:
    activate:
      on-profile: local
  redis:
    host: ${local.redis.host}
    port: ${local.redis.port}
  datasource:
    url: ${local.mysql.url}
    username: ${local.mysql.username}
    password: ${local.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        default_batch_fetch_size: 100
  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${local.naver.client.id}
            client-secret: ${local.naver.client.secret}
            redirect-uri: ${local.naver.redirect.uri}
            authorization-grant-type: authorization_code
            scope: email, profile_image, nickname
            client-name: Naver

        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
cloud:
  aws:
    s3:
      bucket: ${local.s3.bucket}
      path:
        memberProfiles: member-profiles
        posts: posts
    region:
      static: ap-northeast-1
    stack:
      auto: false
    credentials:
      access-key: ${local.s3.access}
      secret-key: ${local.s3.secret}

---
# Develop branch Setting
spring:
  config:
    activate:
      on-profile: develop
  redis:
    host: ${develop.redis.host}
    port: ${develop.redis.port}
  datasource:
    url: ${develop.mysql.url}
    username: ${develop.mysql.username}
    password: ${develop.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        default_batch_fetch_size: 100

  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${develop.naver.client.id}
            client-secret: ${develop.naver.client.secret}
            redirect-uri: ${develop.naver.redirect.uri}
            authorization-grant-type: authorization_code
            scope: email, profile_image, nickname
            client-name: Naver

        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response

cloud:
  aws:
    s3:
      bucket: ${develop.s3.bucket}
      path:
        memberProfiles: member-profiles
        posts: posts
    region:
      static: ap-northeast-1
    stack:
      auto: false
    credentials:
      access-key: ${develop.s3.access}
      secret-key: ${develop.s3.secret}

---

# Release branch Setting
spring:
  config:
    activate:
      on-profile: release
  redis:
    host: ${release.redis.host}
    port: ${release.redis.port}
  datasource:
    url: ${release.mysql.url}
    username: ${release.mysql.username}
    password: ${release.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        default_batch_fetch_size: 100

  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${release.naver.client.id}
            client-secret: ${release.naver.client.secret}
            redirect-uri: ${release.naver.redirect.uri}
            authorization-grant-type: authorization_code
            scope: email, profile_image, nickname
            client-name: Naver

        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response